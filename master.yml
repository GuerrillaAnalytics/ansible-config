
# run locally here, yadda yadda yadda

- hosts: local
  any_errors_fatal: true
  # ensure Python2 is installed for ansible to work correctly
  # switch off gather_facts temporarily as that also fails without
  # Python2 present
  gather_facts: no
  pre_tasks:
    - name: 'install python2'
      become: yes
      raw: apt-get -y install python #python-pip
      when: ansible_os_family == 'Debian'


    - name: Ensure brew is installed on Mac
      include_role:
        name: ansible-role-homebrew
      when: ansible_os_family == 'Darwin'

    - name: ensure aptitude is installed on Linux
      become: yes
      apt:
        name: aptitude
        state: latest
      when: ansible_os_family == 'Debian'
      tags: aptitude

    - name: Check PyEnv directory exists.
      stat:
        path: "{{ ansible_env.HOME }}/.pyenv"
      register: pyenv_dir_exists
      tags: pyenv

    - debug:
        msg: "{{ ansible_env.HOME }}/.pyenv exists "
      when: pyenv_dir_exists.stat.exists and pyenv_dir_exists.stat.isdir
      tags: pyenv

  gather_facts: yes

  vars:
    pycharm_edition: community
    pycharm_version: 2018.3.4
    # pycharm_install_prefix: ansible_env.HOME

  connection: local
  #become: yes

  tasks:
    - name: Upgrade apt cache on Linux
      become: yes
      apt:
        upgrade: yes
        cache_valid_time: 604800 #update cache if been more than one day in secs
      when: ansible_os_family == 'Debian'
      tags: upgrade

    - name: Install DigiKam photo management
      become: yes
      apt:
        name: digikam
        state: latest
        update_cache: true
      when: ansible_os_family == 'Debian'
      tags: digikam

    - name: Install apt-file tool if on Linux
      become: yes
      apt:
        name: apt-file
        state: latest
        update_cache: true
      when: ansible_os_family == 'Debian'
      tags: aptfile

    - name: Print ansible_os_family
      debug: var=ansible_os_family


    - name: Install Atom if on Linux
      include_role:
        name: ansible-role-atom
      when: ansible_os_family == 'Debian'

    - name: Install PyCharm on Linux
      include_role:
        name: ansible-role-pycharm
      vars:
          pycharm_version: 2018.3.5
          pycharm_edition: community
      when: ansible_os_family == 'Debian'


    - name: Install OpenJDK on MacOS
      become: yes
      homebrew_cask:
        name: adoptopenjdk8
        state: present
      when: ansible_os_family == 'Darwin'
      tags: java

    - name: install rclone on Linux
      become: yes
      apt:
        name: rclone
        state: latest
      when: ansible_os_family == 'Debian'
      tags: rclone

    # - name: Install awscli
    #   pip:
    #     name: awscli
    #     #version: "{{ awscli_version }}"
    #     extra_args: --user
    #   tags: awscli

    - name: Ensure ~/.aws directory exists
      file: >
        path="{{ ansible_env.HOME }}/.aws"
        state=directory
      tags: awscli

    # - name: Install ~/.aws/credentials
    #   copy:
    #     src: credentials
    #     dest: "{{ home_directory }}/.aws/credentials"
    #     mode: 0644

    # - name: Creates directory for shared partition
    #   file:
    #     path: "{{ ansible_env.HOME }}/data"
    #     state: directory
    #   tags: shared_partition
    #
    # - name: Mount shared partition
    #   become: yes
    #   mount:
    #     path: "{{ ansible_env.HOME }}/data"
    #     src: /dev/sda6
    #     fstype: ntfs
    #     state: mounted
    #   tags: shared_partition

  roles:
    - role: ansible-data-science-cli
      tags: data-science-cli

    - role: ansible-git
      tags: git

    - role: tommarshall.awscli
      tags: awscli

    # - role: ansible-postgresql
    #   become: yes
    #   vars:
    #     postgresql_users:
    #       - name: enda
    #       - name: postgres
    #     postgresql_databases:
    #       - name: example_db
    #     postgresql_hba_entries:
    #       - { type: all, database: all, user: all, auth_method: trust }
    #   tags: postgresql

    # This role only executes on Darwin if the .pyenv folder
    # does not exist. Otherwise it fails on Darwin.
    - role: avanov.pyenv
      vars:
        pyenv_path: "{{ ansible_env.HOME }}/.pyenv"
        #pyenv_owner: "{{ instance_owner }}"
        pyenv_global: "2.7.16"
        pyenv_update_git_install: no
        pyenv_enable_autocompletion: yes
        pyenv_python_versions:
         - "3.7.2"
         - "2.7.16"
        pyenv_virtualenvs:
         - venv_name: "latest_v3"
           py_version: "3.7.2"

         - venv_name: "latest_v2"
           py_version: "2.7.16"
      when: pyenv_dir_exists.stat.exists == False and ansible_os_family == 'Darwin'
      tags: pyenv
